// <auto-generated />
using System;
using GameZenCritic.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameZenCritic.Infrastructure.Data.Migrations
{
    [DbContext(typeof(GameZenDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GameZenCritic.Infrastructure.Data.Models.Developer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identifying key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GameRep")
                        .HasColumnType("int")
                        .HasComment("Rounded down reputation of the game developer for all games");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Deletion flag");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Name of the company");

                    b.HasKey("Id");

                    b.ToTable("Developer");

                    b.HasComment("The developer company of the game");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GameRep = 0,
                            IsDeleted = false,
                            Name = "Epic Games"
                        },
                        new
                        {
                            Id = 2,
                            GameRep = 0,
                            IsDeleted = false,
                            Name = "From Software"
                        },
                        new
                        {
                            Id = 3,
                            GameRep = 0,
                            IsDeleted = false,
                            Name = "Larian Studios Games"
                        },
                        new
                        {
                            Id = 4,
                            GameRep = 0,
                            IsDeleted = false,
                            Name = "CD Projekt Red Studio"
                        },
                        new
                        {
                            Id = 5,
                            GameRep = 0,
                            IsDeleted = false,
                            Name = "SCE Santa Monica"
                        });
                });

            modelBuilder.Entity("GameZenCritic.Infrastructure.Data.Models.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifying key");

                    b.Property<string>("AgeRating")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Rating for recommended age (usually by ESRB)");

                    b.Property<string>("AgeRatingPicture")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Link to picture of age rating for the game");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Detailed info of the game");

                    b.Property<int>("DeveloperId")
                        .HasColumnType("int")
                        .HasComment("The game developer identifier");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasComment("The game genre identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Deletion flag");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)")
                        .HasComment("Name of the game");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Link to picture of box art for the game");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int")
                        .HasComment("The game publisher identifier");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the game initial release");

                    b.Property<decimal>("TotalScore")
                        .HasColumnType("decimal(4,2)")
                        .HasComment("Average total score of reviews for the game");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.HasIndex("GenreId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Game");

                    b.HasComment("Game list including description and various info");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0843ecf-38cf-4a72-a383-2b1c3c0d8d02"),
                            AgeRating = "Rated M for Mature",
                            AgeRatingPicture = "https://www.metacritic.com/a/neutron/images/logos/esrb/ESRB_2013_M_Rating.png",
                            Description = "Gears of War blends tactical action with survival horror and thrusts gamers into a deep and harrowing story of humankind's epic battle for survival against the Locust Horde, a nightmarish race of creatures that surface from the bowels of the planet.",
                            DeveloperId = 1,
                            GenreId = 1,
                            IsDeleted = false,
                            Name = "Gears of War",
                            Picture = "https://www.metacritic.com/a/img/resize/c2c2122b8f2a30ff7dacbdf98d3091c0a9f8088c/catalog/provider/6/12/6-1-68349-52.jpg",
                            PublisherId = 1,
                            ReleaseDate = new DateTime(2006, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalScore = 8m
                        },
                        new
                        {
                            Id = new Guid("b16e5fc7-1fcd-48e8-ae77-6cf139b0b647"),
                            AgeRating = "Rated M for Mature",
                            AgeRatingPicture = "https://www.metacritic.com/a/neutron/images/logos/esrb/ESRB_2013_M_Rating.png",
                            Description = "A New World Created By Hidetaka Miyazaki And George R. R. Martin ELDEN RING, developed by FromSoftware, Inc. and BANDAI NAMCO Entertainment Inc.",
                            DeveloperId = 2,
                            GenreId = 4,
                            IsDeleted = false,
                            Name = "Elden Ring",
                            Picture = "https://www.metacritic.com/a/img/resize/a7d9a5a01234b361785789476e073076a29dad5b/catalog/provider/6/3/6-1-824862-13.jpg",
                            PublisherId = 2,
                            ReleaseDate = new DateTime(2022, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalScore = 9.5m
                        },
                        new
                        {
                            Id = new Guid("7f1e9d4b-53a8-4e63-9d23-31f48a11c41e"),
                            AgeRating = "Rated M for Mature",
                            AgeRatingPicture = "https://www.metacritic.com/a/neutron/images/logos/esrb/ESRB_2013_M_Rating.png",
                            Description = "An ancient evil has returned to Baldur's Gate, intent on devouring it from the inside out. The fate of Faerun lies in your hands. Alone, you may resist. But together, you can overcome.",
                            DeveloperId = 3,
                            GenreId = 3,
                            IsDeleted = false,
                            Name = "Baldur's Gate 3",
                            Picture = "https://www.metacritic.com/a/img/resize/04973a32611600dace99c3638bd3b8f6a9e09477/catalog/provider/7/2/7-1695438055.jpg",
                            PublisherId = 3,
                            ReleaseDate = new DateTime(2023, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalScore = 9.3m
                        },
                        new
                        {
                            Id = new Guid("3e33c5e3-ec4f-4b31-93b0-686fd2da6314"),
                            AgeRating = "Rated M for Mature",
                            AgeRatingPicture = "https://www.metacritic.com/a/neutron/images/logos/esrb/ESRB_2013_M_Rating.png",
                            Description = "With the Empire attacking the Kingdoms of the North and the Wild Hunt, a cavalcade of ghastly riders, breathing down your neck, the only way to survive is to fight back. As Geralt of Rivia, a master swordsman and monster hunter, leave none of your enemies standing.",
                            DeveloperId = 4,
                            GenreId = 3,
                            IsDeleted = false,
                            Name = "The Witcher 3: Wild Hunt",
                            Picture = "https://pre00.deviantart.net/e81c/th/pre/f/2014/157/f/9/witcher_3_box_cover_warner_bros_variation_by_scratcherpen-d7l8i4h.png",
                            PublisherId = 4,
                            ReleaseDate = new DateTime(2015, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalScore = 9.0m
                        },
                        new
                        {
                            Id = new Guid("a8bf3a6e-509d-497b-92a7-f2c4d0f81b5b"),
                            AgeRating = "Rated M for Mature",
                            AgeRatingPicture = "https://www.metacritic.com/a/neutron/images/logos/esrb/ESRB_2013_M_Rating.png",
                            Description = "The freezing winds of Fimbulwinter have come to Midgard, making survival for Kratos, Atreus, and Mimir in the Norse wilds even more challenging than before. ",
                            DeveloperId = 5,
                            GenreId = 4,
                            IsDeleted = false,
                            Name = "God of War: Ragnarok",
                            Picture = "https://www.metacritic.com/a/img/resize/ca0bc42afe883be3a8bac27a19cf2f972fb07921/catalog/provider/6/3/6-1-905093-13.jpg",
                            PublisherId = 5,
                            ReleaseDate = new DateTime(2022, 11, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalScore = 8.1m
                        });
                });

            modelBuilder.Entity("GameZenCritic.Infrastructure.Data.Models.GamePlatform", b =>
                {
                    b.Property<int>("PlatformId")
                        .HasColumnType("int")
                        .HasComment("Platform key");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Game key");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Deletion flag");

                    b.HasKey("PlatformId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("GamesPlatforms");

                    b.HasComment("List of the games and platforms, many to many related");

                    b.HasData(
                        new
                        {
                            PlatformId = 1,
                            GameId = new Guid("f0843ecf-38cf-4a72-a383-2b1c3c0d8d02"),
                            IsDeleted = false
                        },
                        new
                        {
                            PlatformId = 2,
                            GameId = new Guid("f0843ecf-38cf-4a72-a383-2b1c3c0d8d02"),
                            IsDeleted = false
                        },
                        new
                        {
                            PlatformId = 1,
                            GameId = new Guid("b16e5fc7-1fcd-48e8-ae77-6cf139b0b647"),
                            IsDeleted = false
                        },
                        new
                        {
                            PlatformId = 3,
                            GameId = new Guid("b16e5fc7-1fcd-48e8-ae77-6cf139b0b647"),
                            IsDeleted = false
                        },
                        new
                        {
                            PlatformId = 4,
                            GameId = new Guid("b16e5fc7-1fcd-48e8-ae77-6cf139b0b647"),
                            IsDeleted = false
                        },
                        new
                        {
                            PlatformId = 1,
                            GameId = new Guid("7f1e9d4b-53a8-4e63-9d23-31f48a11c41e"),
                            IsDeleted = false
                        },
                        new
                        {
                            PlatformId = 3,
                            GameId = new Guid("7f1e9d4b-53a8-4e63-9d23-31f48a11c41e"),
                            IsDeleted = false
                        },
                        new
                        {
                            PlatformId = 4,
                            GameId = new Guid("7f1e9d4b-53a8-4e63-9d23-31f48a11c41e"),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("GameZenCritic.Infrastructure.Data.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identifying key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Deletion flag");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Name of the Genre");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasComment("The genre of the game e.g. Action, Adventure etc.");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Third Person Shooter"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Action RPG"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Western RPG"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Action Adventure"
                        });
                });

            modelBuilder.Entity("GameZenCritic.Infrastructure.Data.Models.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifying key");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Text description for the news article");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Game key/identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Deletion flag");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2")
                        .HasComment("When the article  is published");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Title for the news article");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("News");

                    b.HasComment("News list including title and description for a game");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aae47f27-2e4a-4e68-a4f2-0c5e3946b2ab"),
                            Description = "Elden Ring DLC is fast approaching and the new trailer has ignited a fierce online debate about Messmer The Impaler's origins. Messmer The Impaler is supposedly the big bad in the Shadow of the Erdtree expansion, as the Collector's Edition even dedicates a fully detailed figurine to the soon-to-be-boss. But the lore implications around Messmer have split the player base in two, between those who believe he was teased from the very beginning to those who think he's an entirely new creation made for the DLC. Messmer is the figure with several snakes peeking up out of his red robes. Pair that with the all-new landmark trees that are at the center of the new Land of Shadows map, coiled around each other chaotically, and the imagery is clear. Messmer is the Satan stand-in. He's the original sinner against the Erdtree. ",
                            GameId = new Guid("b16e5fc7-1fcd-48e8-ae77-6cf139b0b647"),
                            IsDeleted = false,
                            PublishDate = new DateTime(2024, 2, 26, 19, 41, 34, 148, DateTimeKind.Local).AddTicks(6577),
                            Title = "DLC incoming"
                        });
                });

            modelBuilder.Entity("GameZenCritic.Infrastructure.Data.Models.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Platform identifier key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Deletion flag");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Platform name");

                    b.HasKey("Id");

                    b.ToTable("Platform");

                    b.HasComment("Platform list inclusing identifier and name");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "PC"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Xbox 360"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "PlayStation 5"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Xbox Series X"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "PlayStation 4"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Xbox One"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "Nintendo Switch"
                        });
                });

            modelBuilder.Entity("GameZenCritic.Infrastructure.Data.Models.PlayerGameReview", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Review key/identifier");

                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Player key/identifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Game key/identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Deletion flag");

                    b.HasKey("ReviewId", "PlayerId", "GameId");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayersGamesReviews");

                    b.HasComment("The reviews navigational entity from each player for each game");

                    b.HasData(
                        new
                        {
                            ReviewId = new Guid("a75f4424-8937-4cb9-baa7-9f37a8f123a6"),
                            PlayerId = "dea12856-c198-4129-b3f3-b893d8395085",
                            GameId = new Guid("b16e5fc7-1fcd-48e8-ae77-6cf139b0b647"),
                            IsDeleted = false
                        },
                        new
                        {
                            ReviewId = new Guid("b9a4f07e-1d0f-44d1-ba35-8a6e4fe092bd"),
                            PlayerId = "dea12856-c198-4129-b3f3-b893d8395085",
                            GameId = new Guid("f0843ecf-38cf-4a72-a383-2b1c3c0d8d02"),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("GameZenCritic.Infrastructure.Data.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Publisher identifier key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CountryLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Name of the publisher company");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Deletion flag");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Name of the publisher company");

                    b.HasKey("Id");

                    b.ToTable("Publisher");

                    b.HasComment("The publisher company of the game");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryLocation = "USA",
                            IsDeleted = false,
                            Name = "Microsoft Game Studios"
                        },
                        new
                        {
                            Id = 2,
                            CountryLocation = "Japan",
                            IsDeleted = false,
                            Name = "Bandai Namco Games"
                        },
                        new
                        {
                            Id = 3,
                            CountryLocation = "Netherlands",
                            IsDeleted = false,
                            Name = "Larian Studios Gamess"
                        },
                        new
                        {
                            Id = 4,
                            CountryLocation = "Poland",
                            IsDeleted = false,
                            Name = "CD Projekt Red Studio"
                        },
                        new
                        {
                            Id = 5,
                            CountryLocation = "USA",
                            IsDeleted = false,
                            Name = "PlayStation Studios"
                        });
                });

            modelBuilder.Entity("GameZenCritic.Infrastructure.Data.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Review key/identifier");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasComment("Text info for the review");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Deletion flag");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2")
                        .HasComment("When the review is written");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasComment("The score on this review 0-10");

                    b.HasKey("Id");

                    b.ToTable("Review");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a75f4424-8937-4cb9-baa7-9f37a8f123a6"),
                            Details = "This is the greatest game ever made!",
                            IsDeleted = false,
                            PublishDate = new DateTime(2024, 2, 26, 19, 41, 34, 133, DateTimeKind.Local).AddTicks(5718),
                            Score = 10
                        },
                        new
                        {
                            Id = new Guid("b9a4f07e-1d0f-44d1-ba35-8a6e4fe092bd"),
                            Details = "Was an OK shooter, but overhyped.",
                            IsDeleted = false,
                            PublishDate = new DateTime(2024, 2, 26, 19, 41, 34, 133, DateTimeKind.Local).AddTicks(5747),
                            Score = 7
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GameZenCritic.Infrastructure.Data.Models.Player", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("Player");

                    b.HasData(
                        new
                        {
                            Id = "dea12856-c198-4129-b3f3-b893d8395085",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "728b47a4-49d0-4bfd-80f0-816a08b21c28",
                            Email = "player@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "player@mail.com",
                            NormalizedUserName = "player@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEF31tCK6DjKnRo2j/ldeDzCv2KzO4ekku7roVQcTKYkLG6/VFR2GPYWobhek/e6n+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af9bf934-6803-4061-8548-a145ed80c444",
                            TwoFactorEnabled = false,
                            UserName = "player@mail.com"
                        },
                        new
                        {
                            Id = "fea12856-c198-4129-b3f3-b893d8395080",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "71bbf609-10f0-4db5-8ce2-c9e81b29fac8",
                            Email = "player2@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "player2@mail.com",
                            NormalizedUserName = "player2@mail.com",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e60b9841-09c5-416b-9d57-6addca9a6c4f",
                            TwoFactorEnabled = false,
                            UserName = "player2@mail.com"
                        });
                });

            modelBuilder.Entity("GameZenCritic.Infrastructure.Data.Models.Game", b =>
                {
                    b.HasOne("GameZenCritic.Infrastructure.Data.Models.Developer", "Developer")
                        .WithMany("Games")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameZenCritic.Infrastructure.Data.Models.Genre", "Genre")
                        .WithMany("Games")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameZenCritic.Infrastructure.Data.Models.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Developer");

                    b.Navigation("Genre");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GameZenCritic.Infrastructure.Data.Models.GamePlatform", b =>
                {
                    b.HasOne("GameZenCritic.Infrastructure.Data.Models.Game", "Game")
                        .WithMany("GamesPlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GameZenCritic.Infrastructure.Data.Models.Platform", "Platform")
                        .WithMany("GamesPlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GameZenCritic.Infrastructure.Data.Models.News", b =>
                {
                    b.HasOne("GameZenCritic.Infrastructure.Data.Models.Game", "Game")
                        .WithMany("News")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameZenCritic.Infrastructure.Data.Models.PlayerGameReview", b =>
                {
                    b.HasOne("GameZenCritic.Infrastructure.Data.Models.Game", "Game")
                        .WithMany("PlayersGamesReviews")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GameZenCritic.Infrastructure.Data.Models.Player", "Player")
                        .WithMany("PlayersGamesReviews")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GameZenCritic.Infrastructure.Data.Models.Review", "Review")
                        .WithMany("PlayersGamesReviews")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameZenCritic.Infrastructure.Data.Models.Developer", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("GameZenCritic.Infrastructure.Data.Models.Game", b =>
                {
                    b.Navigation("GamesPlatforms");

                    b.Navigation("News");

                    b.Navigation("PlayersGamesReviews");
                });

            modelBuilder.Entity("GameZenCritic.Infrastructure.Data.Models.Genre", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("GameZenCritic.Infrastructure.Data.Models.Platform", b =>
                {
                    b.Navigation("GamesPlatforms");
                });

            modelBuilder.Entity("GameZenCritic.Infrastructure.Data.Models.Publisher", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("GameZenCritic.Infrastructure.Data.Models.Review", b =>
                {
                    b.Navigation("PlayersGamesReviews");
                });

            modelBuilder.Entity("GameZenCritic.Infrastructure.Data.Models.Player", b =>
                {
                    b.Navigation("PlayersGamesReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
